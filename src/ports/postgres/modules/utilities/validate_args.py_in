
import plpy
from utilities import __mad_version

version_wrapper = __mad_version()
mad_vec = version_wrapper.select_vecfunc()

## ========================================================================

def __is_tbl_exists(tbl):
    """
    Whether a table exists in the database
    """
    if tbl is None or tbl.upper() == 'NULL':
        return plpy.error('Input error: Table name is invalid')
    names = tbl.split(".")
    if len(names) == 1:
        return plpy.execute("select count(*) from information_schema.tables where table_name = '{0}'".format(tbl))[0]['count'] > 0
    elif len(names) == 2:
        schema = names[0]
        table = names[1]
        return plpy.execute("select count(*) from information_schema.tables where table_name = '{table}' and table_schema = '{schema}'".format(table = table, schema = schema))[0]['count'] == 1
    else:
        plpy.error("Format error: Table name strange!")

    return False

## ========================================================================

def __is_tbl_exists_in_schema(tbl):
    """
    Is the table exist in a schema?
    """
    if tbl is None or tbl.upper() == 'NULL':
        return plpy.error('Input error: Table name is invalid')
    names = tbl.split(".")
    if len(names) == 1:
        schema = plpy.execute("select current_schema()")[0]["current_schema"]
        table = names[0]
    elif len(names) == 2:
        schema = names[0]
        table = names[1]
    else:
        plpy.error("Format error: Table name strange!")

    return plpy.execute("select count(*) from information_schema.tables where table_name = '{table}' and table_schema = '{schema}'".format(table = table, schema = schema))[0]['count'] == 1

## ========================================================================

def __is_tbl_has_rows(tbl):
    """
    Does the table have rows?
    """
    if tbl is None or tbl.upper() == 'NULL':
        return plpy.error('Input error: Table name is invalid')
    content = plpy.execute("select count(*) from (select * from " + tbl + " limit 1) s")[0]["count"]
    return content == 1

## ========================================================================

def __get_cols(tbl, schema_madlib="madlib"):
    """
    Get the column names in a table
    """
    array_agg_string = version_wrapper.select_array_agg(schema_madlib)
    if tbl is None or tbl.upper() == 'NULL':
        return plpy.error('Input error: Table name is invalid')
    names = tbl.split(".")
    sql_string = "select " + array_agg_string + \
                        """(column_name::varchar) as cols
                            from information_schema.columns
                            where table_name = '{table_name}'"""
    if len(names) == 1:
        existing_cols = plpy.execute(sql_string.format(table_name = tbl)\
                                    )[0]["cols"]
    elif len(names) == 2:
        schema = names[0]
        table = names[1]
        sql_string += " and table_schema = '{schema_name}'"
        existing_cols = plpy.execute(sql_string.format(table_name=table,
                                                        schema_name=schema) \
                                    )[0]["cols"]
    else:
        plpy.error("Format error: Table name strange!")

    return mad_vec(existing_cols)
    
## ========================================================================

def __is_col_exists(tbl, cols, schema_madlib="madlib"):
    """
    Is the column exist?
    """
    existing_cols = __get_cols(tbl, schema_madlib)

    for col in cols:
        if col not in existing_cols:
            return False
    return True

## ========================================================================

def __is_col_array (tbl, col):
    """
    Is the column an array?
    """
    names = tbl.split(".")
    if len(names) == 1:
        table = names[0]
        schema_str = ""
    elif len(names) == 2:
        schema = names[0]
        table = names[1]
        schema_str = " and table_schema = '" + schema + "'"
    else:
        plpy.error("Format error: Table name strange!")
        
    data_type = plpy.execute(
        """
        select data_type from information_schema.columns
        where table_name = '{table}' and column_name = '{col}' {schema_str}
        """.format(table = table, col = col, schema_str = schema_str))[0]["data_type"]

    return data_type.lower() == "array"

## ========================================================================

def __is_scalar_col_no_null(tbl, col):
    """
    Does a scalar column have no Null values?
    """
    if tbl is None or tbl.upper() == 'NULL':
        return plpy.error('Input error: Table name is invalid')
    total_rows = plpy.execute("select count(*) from " + tbl)[0]["count"]
    col_rows = plpy.execute("select count({col}) from {tbl}".format(col=col, tbl=tbl))[0]["count"]
    return total_rows == col_rows

## ========================================================================

def __is_array_col_same_dimension(tbl, col):
    """
    Do all rows of array col have the same length?
    """
    if tbl is None or tbl.upper() == 'NULL':
        return plpy.error('Input error: Table name is invalid')
    max_dim = plpy.execute("""
                           select max(array_upper({col}, 1)) as max_dim
                           from {tbl}
                           """.format(col=col, tbl=tbl))[0]["max_dim"]
    min_dim = plpy.execute("""
                           select min(array_upper({col}, 1)) as min_dim
                           from {tbl}
                           """.format(col=col, tbl=tbl))[0]["min_dim"]
    return max_dim == min_dim

## ========================================================================

def __is_array_col_no_null(tbl, col):
    """
    Does an array column have any Null values?
    """
    if tbl is None or tbl.upper() == 'NULL':
        return plpy.error('Input error: Table name is invalid')
    row_len = plpy.execute("select count(*) from {tbl}".format(tbl=tbl))[0]["count"]
    dim = plpy.execute("""
                       select max(array_upper({col}, 1)) as dim
                       from {tbl}
                       """.format(col=col, tbl=tbl))[0]["dim"]
    for i in range(1,dim+1):
        l = plpy.execute("select count({col}[{i}]) from {tbl}".format(col=col, tbl=tbl, i=i))[0]["count"]
        if row_len != l:
            return False
    return True

# ========================================================================

def __is_var_valid (tbl, var):
    """
    Test whether the variable(s) is valid by actually select it from
    the table
    """
    try:
        rst = plpy.execute(
            """
            select {var} from {tbl} limit 1
            """.format(var = var, tbl = tbl))
    except Exception:
        return False
    return True

