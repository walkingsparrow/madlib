# coding=utf-8

"""
@file control.py_in

@brief controller classes (e.g. iteration controller)

@namespace utilities

@brief driver functions shared by modules
"""

import plpy

class MinWarning:
    """
    @brief A wrapper for setting the level of logs going into client
    """

    def __init__(self, warningLevel = 'error'):
        self.warningLevel = warningLevel

    def __enter__(self):
        self.oldMsgLevel = plpy.execute("""
            SELECT setting FROM pg_settings WHERE name='client_min_messages'
        """)[0]['setting']
        plpy.execute("""
            SET client_min_messages = {warningLevel}
            """.format(warningLevel = self.warningLevel))
        return self

    def __exit__(self, *args):
        plpy.execute("""
            SET client_min_messages = {oldMsgLevel};
            """.format(oldMsgLevel = self.oldMsgLevel))

class GroupIterationController:
    """
    @brief Abstraction for implementing driver functions in PL/Python

    This class encapsulates handling of the inter-iteration state. The design
    goal is to avoid any conversion between backend-native types and those of
    procedureal languages like PL/Python. Therefore, the expectation is that

    ***all only "template" parameters are passes as PL/Python arguments***,

    whereas non-template arguments are provided in an argument table. Here,
    "template" arguments are those parameters that cannot be SQL parameters,

    ***such as table and column names***.

    The inter-state iteration table contains two columns:
    - <tt>_iteration INTEGER</tt> - The 0-based iteration number
    - <tt>_state <em>self.kwargs.stateType</em></tt> - The state (after
      iteration \c _interation)
    """

    def __init__(self, rel_args, rel_state, stateType,
            temporaryTables = True,
            truncAfterIteration = False,
            schema_madlib = "MADLIB_SCHEMA_MISSING",
            verbose = False,
            grouping_list = None,
            **kwargs):
        self.kwargs = kwargs
        self.kwargs.update(
            rel_args = ('pg_temp.' if temporaryTables else '') + rel_args,
            rel_state = ('pg_temp.' if temporaryTables else '') + rel_state,
            unqualified_rel_state = rel_state,
            stateType = stateType.format(schema_madlib = schema_madlib),
            schema_madlib = schema_madlib)
        self.temporaryTables = temporaryTables
        self.truncAfterIteration = truncAfterIteration
        self.verbose = verbose
        self.inWith = False
        self.iteration = -1
        self.dim = -1
        self.grouping_list = grouping_list
        if self.grouping_list is None:
            self.grouping_list = []
        self.grouping_str = ','.join(grouping_list)


    def __enter__(self):
        with MinWarning('warning'):
            # currently assuming that groups is passed as a valid
            # array
            self.runSQL("""
                DROP TABLE IF EXISTS {rel_state};
                CREATE {temp} TABLE {unqualified_rel_state} AS (
                    SELECT 
                        1::INTEGER as _iteration,
                        {grouping_str},
                        ARRAY[1.1]::{stateType} as _state 
                    FROM {rel_source}
                    LIMIT 0
                );
                """.format(
                        temp='TEMPORARY' if self.temporaryTables else '',
                        **self.kwargs))
        self.inWith = True
        return self

    def __exit__(self, type, value, tb):
        self.inWith = False

    def runSQL(self, sql):
        if self.verbose:
            plpy.notice(sql)
        return plpy.execute(sql)

    def evaluate(self, expression):
        """
        Evaluate the given expression. The expression may depend on
        the current inter-iteration state and all arguments

        @param expression SQL expression. The
            following names are defined and can be used in the condition:
            - \c _args - The (single-row) argument table
            - \c _state - The row of the state table containing the latest
              inter-iteration state
        @return None if \c expression evaluates to NULL, otherwise the value of
            \c expression
        """
        resultObject = self.runSQL("""
                                   SELECT
                                       ({expression}) as _expression,
                                       array[{grouping_str}] as _groups
                                   FROM {{rel_args}} AS _args
                                   LEFT OUTER JOIN (
                                       (
                                           select {grouping_col}, _state as _state1
                                           from {rel_state}
                                           where _iteration = {iteration} - 1
                                       ) sub1
                                       join
                                       (
                                           select {grouping_col}, _state as _state2
                                           from {rel_state}
                                           where _iteration = {iteration}
                                       ) sub2
                                       using ({grouping_col})
                                   ) AS subq1 ON True
                                   """.format(expression = expression).format(
            iteration=self.iteration,
            grouping_str=self.grouping_str,
            **self.kwargs))
        
        if self.dim == -1:
            self.dim = plpy.execute("""
                                    select array_upper(_state, 1) as dim
                                    from {rel_state}
                                    where _iteration = {iteration}
                                    """.format(iteration = self.iteration,
                                               **self.kwargs))[0]["dim"]

        if resultObject.nrows() == 0:
            return None
        else:
            for each_elem in resultObject:
                # update status for each group
                if each_elem['_expression']:
                    self.runSQL("""
                                UPDATE {rel_state} SET _state[{dim}] = 1
                                WHERE ARRAY[{grouping_str}] = {_group_val}
                                    AND _state[{dim}] < 2
                                    AND _iteration = {iteration}
                    """.format(_group_val = each_elem['_groups'],
                               dim = self.dim,
                               grouping_str=self.grouping_str,
                               iteration = self.iteration,
                               **self.kwargs))

        return self.runSQL("""
                           SELECT bool_and((_state).status::boolean) 
                           FROM {rel_state} AS _state_table
                           WHERE _state_table._iteration = {iteration} ;
                           """.format(iteration=self.iteration, 
                                      **self.kwargs)) 

    def test(self, condition):
        """
        Test if the given condition is satisfied. The condition may depend on
        the current inter-iteration state and all arguments

        @param condition Boolean SQL expression. The
            following names are defined and can be used in the condition:
            - \c _args - The (single-row) argument table
            - \c _state - The row of the state table containing the latest
              inter-iteration state
        @return None if \c condition evaluates to NULL, otherwise the Boolean
            value of \c condition
        """

        return self.evaluate("""
            CAST(({condition}) AS BOOLEAN)
            """.format(condition = condition))

    def update(self, newState, **updateKwargs):
        """
        Update the inter-iteration state

        @param newState SQL expression of type
            <tt>stateType.kwargs.stateType</tt>. The
            following names are defined and can be used in the condition:
            - \c _args - The (single-row) argument table
            - \c _state - The row of the state table containing the latest
              inter-iteration state
            .
            Note that <tt>{iteration}</tt> will still be the current iteration.
            For instance, it could be used in the expression as a WHERE
            condition: <tt>[...] WHERE _state._iteration = {iteration}</tt>

        This updates the current inter-iteration state to the result of
        evaluating \c newState. If <tt>self.truncAfterIteration</tt> is true,
        this will replace the old state, otherwise the history of all old states
        is kept.
        """
        newState = newState.format(
            iteration = self.iteration,
            **self.kwargs)
        self.iteration = self.iteration + 1
        self.runSQL("""
            INSERT INTO {rel_state}
            SELECT {iteration}, * from 
                ({newState}) _t2
            """.format(
                iteration = self.iteration,
                newState = newState,
                **self.kwargs))
        if self.truncAfterIteration:
            self.runSQL("""
                DELETE FROM {rel_state} AS _state_table
                WHERE _state._iteration < {iteration}
                """.format(iteration = self.iteration, **self.kwargs))

