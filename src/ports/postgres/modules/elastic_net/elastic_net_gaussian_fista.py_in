
## Try to make every function has a useful return value !
## Try to avoid any changes to function arguments !

import plpy
import math
from elastic_net_utils import __normalize_data
from elastic_net_utils import __compute_means
from elastic_net_utils import __tbl_dimension_rownum
from utilities.utilities import __unique_string
from convex.utils_regularization import __utils_restore_linear_coef_scales
from utilities.validate_args import __is_tbl_exists
from utilities.validate_args import __is_tbl_has_rows
# from utilities.validate_args import __is_col_exists
from utilities.validate_args import __is_tbl_exists_in_schema
# from utilities.validate_args import __is_scalar_col_no_null
# from utilities.validate_args import __is_array_col_same_dimension
# from utilities.validate_args import __is_array_col_no_null
from elastic_net_gaussian_igd import __tbl_dimension_rownum
from utilities.control import IterationController
from elastic_net_utils import IterationControllerNoTableDrop

## ========================================================================

def __fista_params_parser(optimizer_params):
    """
    Parse fista parameters.
    """
    allowed_params = set(["max_iter", "tolerance", "stepsize"])
    name_value = dict()
    # default values
    name_value["stepsize"] = None
    name_value["max_iter"] = 100 
    name_value["tolerance"] = 0.000001
    
    for s in optimizer_params:
        items = s.split("=")
        if (len(items) != 2):
            plpy.error("Optimizer parameter list has incorrect format!")
        param_name = items[0].strip().lower()
        param_value = items[1].strip().lower()

        if param_name not in allowed_params:
            plpy.error("{0} is not a valid parameter name for the FISTA optimizer.".format(param_name))

        if param_name == "stepsize":
            name_value["stepsize"] = float(param_value)
            
        if param_name == "max_iter":
            name_value["max_iter"] = int(param_value)

        if param_name == "tolerance":
            name_value["tolerance"] = float(param_value)
            
    # validate the parameters
    if name_value["stepsize"] is not None and name_value["stepsize"] <= 0:
        plpy.error("Elastic Net error: stepsize must be positive!")
            
    if name_value["max_iter"] <= 0:
        plpy.error("Elastic Net error: max_iter must be positive!")

    if name_value["tolerance"] <= 0:
        plpy.error("Elastic Net error: tolerance must be positive!")

    return name_value

## ========================================================================

def __gaussian_fista_lipschitz_const (**args):
    """
    Calculate the Lipschitz constant for this particular data set

    For Gaussian response case (linear model), the Lipschitz constant
    is actually $max_i <x_i^2>$ for mean squared error.

    So this function computes all the mean squared values for the array
    elements in one scan of the data table, and pick out the largest one.

    @param tbl_used -- Table (may or may not be normalized) to be used for all
    the following computation
    @param col_ind_var -- Name of the independent variable array
    @param dimension -- Length of the independent variable array
    """
    squaredx = plpy.execute(
        """
        select
            avg(x^2) * {dimension} as x2
        from (
            select
                unnest({col_ind_var_new}) as x
            from
                {tbl_used}
        ) t
        """.format(**args))[0]["x2"]
    return squaredx + args["lambda_value"] * (1 - args["alpha"])
    
## ========================================================================

def __fista_create_tbl_args(**args):
    """
    create the temporary schema and argument table used in FISTA iterations
    """
    (xmean_str, ymean) = __compute_means(args["tbl_used"], args["col_ind_var_new"],
                                         args["col_dep_var"], args["dimension"],
                                         args["normalization"])
    
    effective_lambda = args["lambda_value"] # * row_num
    tbl_fista_state = __unique_string()
    tbl_fista_args = __unique_string()
    plpy.execute("""
                 drop table if exists {tbl_fista_args};       
                 create temp table {tbl_fista_args} (
                     {dimension_name}       integer,
                     {stepsize_name}        double precision,
                     {lambda_name}          double precision,
                     {alpha_name}           double precision,
                     {total_rows_name}      integer,
                     {max_iter_name}        integer,
                     {tolerance_name}       double precision,
                     {xmean_name}           double precision[],
                     {ymean_name}           double precision
                 );
                 """.format(**args))
    plpy.execute("""
                 insert into {tbl_fista_args} values
                     ({dimension}, {stepsize}, {effective_lambda},
                     {alpha}, {row_num}, {max_iter}, {tolerance},
                     {xmean_str}, {ymean});
                 """.format(effective_lambda = effective_lambda,
                            xmean_str = xmean_str, ymean = ymean,
                            **args))

    return None
    
## ========================================================================

def __fista_construct_dict(schema_madlib, tbl_source, col_ind_var, col_dep_var,
                         tbl_result, dimension, row_num, lambda_value, alpha,
                         normalization, optimizer_params_dict):
    """
    Construct the dict used by a series of SQL queries in FISTA optimizer.
    """
    args = dict(schema_madlib = schema_madlib, tbl_source = tbl_source,
                tbl_data = tbl_source, # argument name used in normalization
                col_ind_var = col_ind_var, col_dep_var = col_dep_var,
                col_ind_var_norm_new = __unique_string(), # for normalization usage
                col_ind_var_tmp = __unique_string(),
                tbl_result = tbl_result,
                lambda_value = lambda_value, alpha = alpha,
                dimension = dimension, row_num = row_num,
                normalization = normalization,
                )
    
    # Add the optimizer parameters
    args.update(optimizer_params_dict)

    # Table names useful when normalizing the original data
    # Note: in order to be consistent with the calling convention
    # of the normalization functions, multiple elements of the dict
    # actually have the same value. This is a price that one has to pay
    # if he wants to save typing argument names by using **args as the
    # function argument.
    tbl_ind_scales = __unique_string()
    tbl_dep_scale = __unique_string()
    tbl_data_scaled = __unique_string()
    args.update(tbl_scale = tbl_dep_scale, tbl_dep_scale = tbl_dep_scale,
                tbl_scales = tbl_ind_scales, tbl_ind_scales = tbl_ind_scales,
                tbl_data_scaled = tbl_data_scaled)

    # Table names used in IGD iterations
    args.update(tbl_fista_state = __unique_string(),
                tbl_fista_args = __unique_string())
    
    # Table name used as the intermediate storage before scale restores
    args.update(tbl_inter_result = __unique_string())

    # more, for args table
    args["dimension_name"] = __unique_string()
    args["stepsize_name"] = __unique_string()
    args["lambda_name"] = __unique_string()
    args["alpha_name"] = __unique_string()
    args["total_rows_name"] = __unique_string()
    args["max_iter_name"] = __unique_string()
    args["tolerance_name"] = __unique_string()
    args["xmean_name"] = __unique_string()
    args["ymean_name"] = __unique_string()
   
    return args

## ========================================================================

def __fista_cleanup_temp_tbls(**args):
    """
    Drop all temporary tables used by FISTA optimizer,
    including tables used in the possible normalization
    and FISTA iterations.
    """
    plpy.execute("""
                 drop table if exists {tbl_ind_scales};
                 drop table if exists {tbl_dep_scale};
                 drop table if exists {tbl_data_scaled};
                 drop table if exists {tbl_fista_args};
                 drop table if exists pg_temp.{tbl_fista_state};
                 """.format(**args))
  
    return None

## ========================================================================

def __elastic_net_gaussian_fista_train(schema_madlib, tbl_source, col_ind_var,
                                     col_dep_var, tbl_result, lambda_value, alpha,
                                     normalization, optimizer_params, **kwargs):
    (tbl_source,
     col_ind_var,
     col_dep_var,
     tbl_result,
     lambda_value,
     alpha) = __elastic_net_gaussian_fista_validate_args(tbl_source,
                                                       col_ind_var,
                                                       col_dep_var,
                                                       tbl_result,
                                                       lambda_value,
                                                       alpha,
                                                       normalization)
    
    return __elastic_net_gaussian_fista_train_compute(schema_madlib, tbl_source, col_ind_var,
                                                    col_dep_var, tbl_result, lambda_value, alpha,
                                                    normalization, optimizer_params, **kwargs)
    
## ========================================================================

def __elastic_net_gaussian_fista_validate_args(tbl_source, col_ind_var, col_dep_var,
                                             tbl_result, lambda_value, alpha,
                                             normalization):
    if (tbl_source is None or col_ind_var is None or col_dep_var is None
        or tbl_result is None or lambda_value is None or alpha is None
        or normalization is None):
        plpy.error("Elastic Net error: You have unsupported NULL value(s) in the arguments!")
    
    if not __is_tbl_exists(tbl_source):
        plpy.error("Elastic Net error: Data table " + tbl_source + " does not exist!")

    if __is_tbl_exists_in_schema(tbl_result):
        plpy.error("Elastic Net error: Output table " + tbl_result + " already exists!")

    if not __is_tbl_has_rows(tbl_source):
        plpy.error("Elastic Net error: Data table " + tbl_source + " is empty!")

    # if not __is_col_exists(tbl_source, [col_ind_var, col_dep_var]):
    #     plpy.error("Elastic Net error: Some column does not exist!")

    # if not __is_scalar_col_no_null(tbl_source, col_dep_var):
    #     plpy.error("Elastic Net error: Dependent variable has Null values! Please filter out Null values before using this function!")

    # if not __is_array_col_same_dimension(tbl_source, col_ind_var):
    #     plpy.error("Elastic Net error: Independent variable arrays have unequal lengths!")

    # if not __is_array_col_no_null(tbl_source, col_ind_var):
    #     plpy.error("Elastic Net error: Independent variable arrays have Null values! Please filter out Null values before using this function!")

    if lambda_value < 0:
        plpy.error("Elastic Net error: The regularization parameter lambda cannot be negative!")

    if alpha < 0 or alpha > 1:
        plpy.error("Elastic Net error: The elastic net control parameter alpha must be in [0,1] !")

    return (tbl_source, col_ind_var, col_dep_var, tbl_result, lambda_value, alpha)

## ========================================================================
    
def __elastic_net_gaussian_fista_train_compute(schema_madlib, tbl_source, col_ind_var,
                                             col_dep_var, tbl_result, lambda_value, alpha,
                                             normalization, optimizer_params, **kwargs):
    """
    Fit linear model with elastic net regularization using FISTA optimization.

    @param tbl_source        Name of data source table
    @param col_ind_var       Name of independent variable column,
                             independent variable is an array
    @param col_dep_var       Name of dependent variable column
    @param tbl_result        Name of the table to store the results,
                             will return fitting coefficients and
                             likelihood
    @param lambda_value      The regularization parameter
    @param alpha             The elastic net parameter, [0, 1]
    @param normalization     Whether to normalize the variables
    @param optimizer_params  Parameters of the above optimizer, the format
                             is '{arg = value, ...}'::varchar[]
    """
    old_msg_level = plpy.execute("""
                                 select setting from pg_settings
                                 where name='client_min_messages'
                                 """)[0]['setting']
    plpy.execute("set client_min_messages to warning")

    (dimension, row_num) = __tbl_dimension_rownum(tbl_source, col_ind_var)

    # generate a full dict to ease the following string format
    # including several temporary table names
    args = __fista_construct_dict(schema_madlib, tbl_source, col_ind_var, col_dep_var, tbl_result,
                                  dimension, row_num, lambda_value, alpha, normalization,
                                  __fista_params_parser(optimizer_params))

    # use normalized data or not
    if normalization:
        __normalize_data(**args)
        tbl_used = args["tbl_data_scaled"]
        use_temp = "temp"
        args["col_ind_var_new"] = args["col_ind_var_norm_new"]
    else:
        tbl_used = tbl_source
        args["tbl_inter_result"] = tbl_result
        use_temp = ""
        args["col_ind_var_new"] = col_ind_var

    args["tbl_used"] = tbl_used
    if args["stepsize"] is None:
        # calculate Lipschitz constant for this particular data set
        lipschitz = __gaussian_fista_lipschitz_const(**args)
        args.update(stepsize = 1./lipschitz)

    # create the temp table that passes parameter values to FISTA optimizer
    __fista_create_tbl_args(**args)
    
    # perform the actual calculation
    iteration_run = __compute_gaussian_fista(schema_madlib, args["tbl_fista_args"],
                                             args["tbl_fista_state"], tbl_used,
                                             args["col_ind_var_new"],
                                             col_dep_var, start_iter = 0,
                                             dimension_name = args["dimension_name"],
                                             stepsize_name = args["stepsize_name"],
                                             lambda_name = args["lambda_name"],
                                             alpha_name = args["alpha_name"],
                                             total_rows_name = args["total_rows_name"],
                                             max_iter_name = args["max_iter_name"],
                                             tolerance_name = args["tolerance_name"],
                                             xmean_name = args["xmean_name"],
                                             ymean_name = args["ymean_name"])

    plpy.execute("""
                 drop table if exists {tbl_inter_result};
                 create {use_temp} table {tbl_inter_result} (
                    coefficients      double precision[],
                    intercept         double precision,
                    log_likelihood    double precision,
                    normalization     boolean,
                    iteration_run        integer)
                 """.format(use_temp = use_temp, **args))

    plpy.execute("""
                 insert into {tbl_inter_result}
                    select
                        (result).coefficients,
                        (result).intercept,
                        0, 
                        False, {iteration_run}
                    from (
                        select {schema_madlib}.__gaussian_fista_result(_state) as result
                        from {tbl_fista_state}
                        where _iteration = {iteration_run}
                    ) t
                 """.format(iteration_run = iteration_run, **args))

    # # compute the likelihood
    plpy.execute("""
                 update {tbl_inter_result} set log_likelihood = llhd from (
                    select
                        -(loss + {lambda_value} * ((1 - {alpha}) * module_2 / 2. + {alpha} * module_1)) as llhd
                    from (
                        select
                            avg(({col_dep_var} - {schema_madlib}.elastic_net_predict('gaussian',
                                                                                    coefficients,
                                                                                    intercept,
                                                                                    {col_ind_var_new}))^2) / 2.
                                                                                    as loss
                        from
                            {tbl_inter_result},
                            {tbl_used}
                        ) t1,
                        (
                            select sum(coef^2) as module_2, sum(abs(coef)) as module_1
                            from (
                                select unnest(coefficients) as coef
                                from {tbl_inter_result}
                            ) s
                        ) t2
                 ) u
                 """.format(**args))
    
    if normalization:
        __utils_restore_linear_coef_scales(tbl_coef = args["tbl_inter_result"],
                                           col_coef = "coefficients",
                                           col_others = ["log_likelihood", "normalization", "iteration_run"],
                                           tbl_origin_coef = tbl_result,
                                           **args)
        plpy.execute("update {tbl_result} set normalization = True".format(**args))

    # cleanup    
    __fista_cleanup_temp_tbls(**args)
    if normalization:
        plpy.execute("drop table if exists {tbl_inter_result}".format(**args))
    plpy.execute("set client_min_messages to " + old_msg_level)
    return None
    
## ========================================================================

def __compute_gaussian_fista(schema_madlib, tbl_args, tbl_state, tbl_source,
                           col_ind_var, col_dep_var, start_iter, **kwargs):
    """
    Driver function for elastic net with Gaussian response using FISTA

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @param tbl_args Name of the (temporary) table containing all non-template
        arguments
    @param tbl_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param col_ind_var Name of the independent variables column
    @param col_dep_var Name of the dependent variable column
    @param drop_table Boolean, whether to use IterationController (True) or
                      IterationControllerNoTableDrop (False)
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    
    @return The iteration number (i.e., the key) with which to look up the
        result in \c tbl_state
    """
    iterationCtrl = IterationController( #TableAppend(
        rel_args = tbl_args,
        rel_state = tbl_state,
        stateType = "double precision[]",
        truncAfterIteration = False,
        schema_madlib = schema_madlib, # Identifiers start here
        rel_source = tbl_source,
        col_ind_var = col_ind_var,
        col_dep_var = col_dep_var,
        **kwargs)
    
    with iterationCtrl as it:
        it.iteration = start_iter
        while True:
            # manually add the intercept term
            it.update("""
                      select
                          {schema_madlib}.__gaussian_fista_step(
                              ({col_ind_var})::double precision[],
                              ({col_dep_var})::double precision,
                              (select _state from {rel_state}
                                  where _iteration = {iteration}),
                              (_args.{lambda_name})::double precision,
                              (_args.{alpha_name})::double precision,
                              (_args.{stepsize_name})::double precision,
                              (_args.{dimension_name})::integer,
                              (_args.{xmean_name})::double precision[],
                              (_args.{ymean_name})::double precision,
                              1::double precision,
                              (_args.{total_rows_name})::integer)
                      from {rel_source} as _src, {rel_args} as _args
                      """)
         
            if it.test("""
                       {iteration} >= _args.{max_iter_name} or
                       {schema_madlib}.__gaussian_fista_state_diff(
                           (select _state from {rel_state}
                               where _iteration = {iteration} - 1),
                           (select _state from {rel_state}
                               where _iteration = {iteration})) < _args.{tolerance_name}
                       """):
                break
    return iterationCtrl.iteration
