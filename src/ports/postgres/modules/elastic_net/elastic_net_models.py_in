
## Try to make every function has a useful return value !
## Try to avoid any changes to function arguments !

import plpy
from elastic_net_optimizer_fista import __elastic_net_fista_train
from elastic_net_optimizer_igd import __elastic_net_igd_train

# ========================================================================

def __elastic_net_gaussian_fista_train(schema_madlib, tbl_source, col_ind_var,
                                       col_dep_var, tbl_result, lambda_value, alpha,
                                       normalization, optimizer_params, max_iter,
                                       tolerance, outstr_array, **kwargs):
    """
    Use FISTA to solve linear models
    """    
    return __elastic_net_fista_train(schema_madlib,
                                     "__gaussian_fista_step",
                                     "__gaussian_fista_state_diff",
                                     "gaussian",
                                     tbl_source, col_ind_var,
                                     col_dep_var, tbl_result, lambda_value, alpha,
                                     normalization, optimizer_params, max_iter,
                                     tolerance, outstr_array, **kwargs)

# ========================================================================

def __elastic_net_gaussian_igd_train(schema_madlib, tbl_source, col_ind_var,
                                     col_dep_var, tbl_result, lambda_value, alpha,
                                     normalization, optimizer_params, max_iter,
                                     tolerance, outstr_array, **kwargs):
    """
    Use IGD to solve linear models
    """
    return __elastic_net_igd_train(schema_madlib,
                                   "__gaussian_igd_step",
                                   "__gaussian_igd_state_diff",
                                   "gaussian",
                                   tbl_source, col_ind_var,
                                   col_dep_var, tbl_result, lambda_value, alpha,
                                   normalization, optimizer_params, max_iter,
                                   tolerance, outstr_array, **kwargs)

# ========================================================================

def __elastic_net_binomial_fista_train(schema_madlib, tbl_source, col_ind_var,
                                       col_dep_var, tbl_result, lambda_value, alpha,
                                       normalization, optimizer_params, max_iter,
                                       tolerance, outstr_array, **kwargs):
    """
    Use FISTA to solve linear models
    """    
    return __elastic_net_fista_train(schema_madlib,
                                     "__binomial_fista_step",
                                     "__binomial_fista_state_diff",
                                     "binomial",
                                     tbl_source, col_ind_var,
                                     col_dep_var, tbl_result, lambda_value, alpha,
                                     normalization, optimizer_params, max_iter,
                                     tolerance, outstr_array, **kwargs)

# ========================================================================

def __elastic_net_binomial_igd_train(schema_madlib, tbl_source, col_ind_var,
                                     col_dep_var, tbl_result, lambda_value, alpha,
                                     normalization, optimizer_params, max_iter,
                                     tolerance, outstr_array, **kwargs):
    """
    Use IGD to solve linear models
    """
    return __elastic_net_igd_train(schema_madlib,
                                   "__binomial_igd_step",
                                   "__binomial_igd_state_diff",
                                   "binomial",
                                   tbl_source, col_ind_var,
                                   col_dep_var, tbl_result, lambda_value, alpha,
                                   normalization, optimizer_params, max_iter,
                                   tolerance, outstr_array, **kwargs)
    