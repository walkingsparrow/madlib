"""
@file summary.py_in

@brief Summary function for descriptive statistics

@namespace summary
"""
import plpy
from time import time
from utilities.utilities import __mad_version
from Summarizer import Summarizer
version_wrapper = __mad_version()

def summary(schema_madlib, source_table, output_table, target_cols, grouping_cols,
    get_distinct, get_quartiles, ntile_array, how_many_mfv, get_estimates):
    """
        Main summary function that is called by SQL to execute summary
        statistics on a table.

        @param schema_madlib        Madlib Schema namespace
        @param source_table         Name of input table
        @param output_table         Name of output table
        @param target_cols          Names of specific columns for which to get summary
        @param grouping_cols        Names of columns on which to group-by
                                        (no summary is provided for these columns)
        @param get_distinct         Should summary include distinct count
        @param get_quartiles        Should summary include quartile information
        @param ntile_array          Array for quantiles to include in summary
                                        (each element should be in [0, 1])
        @param how_many_mfv         How many frequent values to output?
        @param get_estimates        Should the summmary information be estimated or exact?

    """
    if version_wrapper.is_pg():
        plpy.notice("This function is currently not supported by PostgreSQL.")
        return None

    # distinctify can be one of the following values: 'Estimated', 'Exact', and
    # 'None'.
    distinctify = 'Exact'
    if get_estimates:
        distinctify = 'Estimated'

    # ntileify can take one of the following values: 'Estimated', 'Exact', and
    # 'None', but currently "Estimated" is not supported.
    ntileify = 'Exact'

    if not get_distinct:
        distinctify = 'None'

    if not get_quartiles:
        ntileify = 'None'    ## XXX: Confirm if this is the right behavior.
                             ##     Quartiles are to be outputed independent of
                             ##     the percentile array

    if not version_wrapper.is_gp422_and_up():
        # Currently not supporting percentiles in GPDB < 4.2
        ntileify = 'None'

    # convert comma delimited string input to a list of column names
    (target_cols, grouping_cols) = _analyze_str_inputs(target_cols, grouping_cols)

    start = time()
    summarizer = Summarizer(
        schema_madlib, source_table, output_table, target_cols, grouping_cols,
        distinctify, ntileify, ntile_array)
    summarizer.run()
    end = time()

    count = plpy.execute(
        "SELECT count(*) FROM {output_table}".format(
            output_table = output_table))[0]['count']
    return (output_table, count, end - start)

# -----------------------------------------------------------------------
# Input parameter checks and edits
# -----------------------------------------------------------------------
def _analyze_str_inputs(target_cols, grouping_cols):
    """
    Analyze target_col and grouping_cols string input and convert them to a list
    """
    if target_cols is None or target_cols.strip() == '':
        target_cols = None
    else:
        target_cols = target_cols.replace(' ', '').split(',')

    if grouping_cols is None or grouping_cols.strip() == '':
        # We make grouping_cols a list with None as an element
        # since we always want to return summary for complete table
        grouping_cols = [None]
    else:
        grouping_cols = grouping_cols.replace(' ', '').split(',')
        grouping_cols.append(None) # to return summary on complete table
    return (target_cols, grouping_cols)

# -----------------------------------------------------------------------
# Help messages
# -----------------------------------------------------------------------
def summary_help_message(schema_madlib, message=None, **kwargs):
    """
    Given a help string, provide usage information
    """   
    if message is not None and \
            message.lower() in ("usage", "usg", "use", "help", "?"):
        return """
        Usage:
        -----------------------------------------------------------------------
        SELECT {schema_madlib}.summary
        (
            source_table            TEXT,       -- Source table name (Required)
            output_table            TEXT,       -- Output table name (Required)
            target_cols             TEXT,       -- Comma separated columns for which summary is desired
                                                --      (Default: NULL - produces result for all columns)
            grouping_cols           TEXT,       -- Comma separated columns on which to group results
                                                --      (Default: NULL - provides summary on complete table)
            get_distinct            BOOLEAN,    -- Are distinct values required?
                                                --      (Default: True)
            get_quartiles           BOOLEAN,    -- Are quartiles required?
                                                --      (Default: True)
            ntile_array             FLOAT8[],   -- Array of quantile values to compute
                                                --      (Default: NULL - Quantile array is not included in result)
            how_many_mfv            INTEGER,    -- How many most-frequent-values to compute?
                                                --      (Default: 10)
            get_estimates           BOOLEAN     -- Should we produce exact or estimated values for distincts
        )                                       --      (Default: True)
        -----------------------------------------------------------------------
        Ouput table will be in following format:
            - GroupByColumn     : Group-by column names (NULL if none provided)
            - GroupByValue      : Values of the Group-by column (NULL if no grouping)
            - TargetColumn      : Targeted column values for which summary is requested
            - TargetColumnNumber: Physical column number for the target column, as described in pg_attribute
            - DataType          : Data type of target column. Standard GPDB descriptors will be displayed
            - RowCount          : Number of rows for the target column
            - DistinctValues    : Number of distinct values in the target column
            - MissingValues     : Number of missing values in the target column
----------  - BlankValues: number of blank values (blanks are defined by the regular expression '^\w*$')
            - FractionMissing   : Percentage of total rows that are missing. Will be expressed as a decimal (e.g. 0.3)
            - FractionBlank     : Percentage of total rows that are blank. Will be expressed as a decimal (e.g. 0.3)
            - Mean              : Mean value of target column (if target is numeric, else NULL)
            - Median            : Median value of target column (if target is numeric, else NULL)
            - Min               : Min value of target column (for strings this is the length of the shortest string)
            - Max               : Max value of target column (for strings this is the length of the longest string)
            - Variance          : Variance of target columns (if target is numeric, else NULL for strings)
            - Quartile-1        : First quartile (25th percentile, only for numeric columns)
            - Quartile-3        : Third quartile (25th percentile, only for numeric columns)
            - QuantileArray     : Percentile values corresponding to ntile_array
            - MostFrequentValues: Most frequent values
            - MFVFrequencies    : Frequency of the most frequent values
        """.format(schema_madlib = schema_madlib)
    else:
        if message is None:
            return """
            'summary' is a generic function used to produce summary statistics
            of any data table.  The function invokes particular 'methods' from
            the MADlib library to provide an overview of the data.
            -------
            For an overview on usage, run:
            SELECT {schema_madlib}.summary('usage');
            -------
            For extensive examples, run:
            SELECT {schema_madlib}.summary('examples')
            """.format(schema_madlib = schema_madlib)

