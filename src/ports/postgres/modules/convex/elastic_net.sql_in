/* ----------------------------------------------------------------------- *//** 
 *
 * @file elastic_net.sql_in
 *
 * @brief SQL functions for elastic net regulation
 * @date July 2012
 *
 * @sa For a brief introduction to elastic net, see the module
 *     description \ref grp_lasso.
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4') --'

/**
 * @brief Interface for elastic net
 *
 * @param tbl_source        Name of data source table
 * @param col_ind_var       Name of independent variable column, independent variable is an array
 * @param col_dep_var       Name of dependent variable column
 * @param tbl_result        Name of the table to store the results, will return fitting coefficients and likelihood
 * @param lambda            The regulation parameter
 * @param alpha             The elastic net parameter, [0, 1]
 * @param normalization     Whether to normalize the variables
 * @param regress_family    Response type, 'gaussian' or 'binomial'
 * @param optimizer         The optimization algorithm, for example 'igd'
 * @param optimizer_params  Parameters of the above optimizer, the format is '{arg = value, ...}'::varchar[]
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.elastic_net_train(
    tbl_source          VARCHAR,
    col_ind_var         VARCHAR,
    col_dep_var         VARCHAR,
    tbl_result          VARCHAR,
    lambda              DOUBLE PRECISION,
    alpha               DOUBLE PRECISION,
    normalization       BOOLEAN,
    regress_family      VARCHAR,
    optimizer           VARCHAR,
    optimizer_params    VARCHAR[]
) RETURNS VOID AS $$
PythonFunction(convex, elastic_net, elastic_net_train)
$$ LANGUAGE plpythonu;

------------------------------------------------------------------------

/**
 * @brief Help function, to print out the supported families
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.elastic_net_train()
RETURNS VARCHAR AS $$
DECLARE
    str     VARCHAR;
BEGIN
    str := 'Right now, gaussian (linear) and binomial (logistic) are the supported regress_family!';
    return str;
END;
$$ LANGUAGE plpgsql STRICT;

------------------------------------------------------------------------

/**
 * @brief Help function, to print out the supported optimizer for a family
 * or print out the parameter list for an optimizer
 *
 * @param family_or_optimizer   Response type, 'gaussian' or 'binomial', or
 * optimizer type
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.elastic_net_train(
    regress_family  VARCHAR
) RETURNS VARCHAR AS $$
PythonFunction(convex, elastic_net, elastic_net_help)
$$ LANGUAGE plpythonu;
